from llama_cpp import Llama
import os
import json
import re
import time

MODEL_PATH = os.getenv("LLAMA_MODEL", "/app/models/llama-7b.gguf")
llm = Llama(
    model_path=MODEL_PATH,
    n_ctx=1024,         # –º–µ–Ω—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –±—ã—Å—Ç—Ä–µ–µ
    n_threads=4,
    n_batch=128
)

PROMPT = """
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –≤–∞–ª—é—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è. –ü—Ä–æ—á–∏—Ç–∞–π —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∏–∂–µ –∏ –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:

{
  "contract_number": "...",
  "contract_date": "YYYY-MM-DD",
  "contract_amount": "...",
  "currency": "...",
  "deal_type": "...",
  "tnved_code": "...",
  "foreign_partner": {
    "name": "...",
    "country": "...",
    "swift": "...",
    "address": "..."
  },
  "payment_terms": "..."
}

–û—Ç–≤–µ—Ç –Ω–∞—á–Ω–∏ —Å —Å–∏–º–≤–æ–ª–∞ { –∏ –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON. –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.
–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å ‚Äî –≤–µ—Ä–Ω–∏: {"error": "failed"}

–¢–µ–∫—Å—Ç:
"""

def extract_contract_parameters(text: str) -> dict:
    print("üß† [LLM] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞...")
    start = time.time()

    context = text[:1200] + "\n\n" + text[-300:]  # –Ω–∞—á–∞–ª–æ + –∫–æ–Ω–µ—Ü
    prompt = PROMPT + context
    print(f"üîé [LLM prompt]: {prompt[:300]}...")

    result = llm(prompt, stop=["\n\n"], temperature=0.2)
    output = result["choices"][0]["text"].strip()

    print(f"‚è±Ô∏è [LLM] –í—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {time.time() - start:.2f} —Å–µ–∫")
    print(f"üì• [LLM-–æ—Ç–≤–µ—Ç] {output[:200]}...")

    # –ü–æ–∏—Å–∫ JSON-–±–ª–æ–∫–∞
    try:
        match = re.search(r"{.*}", output, re.DOTALL)
        if not match:
            print("‚ö†Ô∏è [LLM] JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—Ç –æ—à–∏–±–∫–∏.")
            return {"error": "failed"}
        data = json.loads(match.group(0))
        return data
    except Exception as e:
        print(f"üõë [LLM] –û—à–∏–±–∫–∞ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return {"error": "failed"}