from llama_cpp import Llama
import os
import json
import re
import time

MODEL_PATH = os.getenv("LLAMA_MODEL", "/app/models/llama-7b.gguf")

llm = Llama(
    model_path=MODEL_PATH,  # 4-–±–∏—Ç–Ω—ã–π –±–∏–Ω–∞—Ä–Ω–∏–∫
    n_ctx=3064,           # –∏–ª–∏ –º–µ–Ω—å—à–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —á–∞–Ω–∫–∞
    n_threads=4,          # –≤—Å–µ –≤–∞—à–∏ CPU-—è–¥—Ä–∞
    n_batch=8,            # –º–µ–Ω—å—à–∏–µ –±–∞—Ç—á–∏ ‚Äì –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–¥–∞—á–∞
    f16_kv=True,          # —Ö—Ä–∞–Ω–∏—Ç—å KV-–∫—ç—à –≤ fp16
    use_mlock=True,       # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
)

PROMPT = """
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤–∞–ª—é—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è. 
–ü—Ä–æ—á–∏—Ç–∞–π —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –≤–µ—Ä–Ω–∏ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω JSON-–æ–±—ä–µ–∫—Ç –ø–æ —Å—Ö–µ–º–µ:

{
  "contract_number": "...",
  "contract_date": "...",
  "contract_amount": 0.0,
  "currency": "...",
  "deal_type": "...",
  "tnved_code": "...",
  "foreign_partner": {
    "name": "...",
    "country": "...",
    "swift": "...",
    "address": "..."
  },
  "payment_terms": "..."
}

–í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ JSON ‚Äî –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π.  
–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –∏–∑–≤–ª–µ—á—å ‚Äî –≤–µ—Ä–Ω–∏ —Ä–æ–≤–Ω–æ {"error":"failed"}  
<<<END>>>

–¢–ï–ö–°–¢ –î–û–ì–û–í–û–†–ê:
"""


def chunk_text(tokens, max_len=512, overlap=64):
    for i in range(0, len(tokens), max_len - overlap):
        yield tokens[i : i + max_len]

def extract_contract_parameters(text: str) -> dict:
    print("üß† [LLM] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    tokens = text.split()
    for chunk in chunk_text(tokens):
        prompt = PROMPT + " " + " ".join(chunk)
        start = time.time()
        resp = llm(
            prompt,
            stop=["<<<END>>>"],
            temperature=0.0,
            top_p=1.0,
            max_tokens=256,
        )
        duration = time.time() - start
        output = resp["choices"][0]["text"].strip()
        print(f"‚è±Ô∏è {duration:.2f}s, –æ—Ç–≤–µ—Ç: {output[:100]}")

        m = re.search(r"(\{.*\})", output, re.DOTALL)
        if m:
            try:
                return json.loads(m.group(1))
            except json.JSONDecodeError:
                continue

    return {"error": "failed"}
