from llama_cpp import Llama
import os
import json
import re
import time

MODEL_PATH = os.getenv("LLAMA_MODEL", "/app/models/llama-7b.gguf")
llm = Llama(
    model_path=MODEL_PATH,
    n_ctx=2048,
    n_threads=4,
    n_batch=128  # ‚è± –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏!
)

EXTRACTION_PROMPT = """
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –≤–∞–ª—é—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –≤–Ω–µ—à–Ω–µ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –≤–µ—Ä–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

{
  "contract_number": "–Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞",
  "contract_date": "–¥–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD",
  "contract_amount": "—Å—É–º–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ (—á–∏—Å–ª–æ)",
  "currency": "–≤–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD)",
  "deal_type": "—ç–∫—Å–ø–æ—Ä—Ç –∏–ª–∏ –∏–º–ø–æ—Ä—Ç",
  "tnved_code": "–¢–ù –í–≠–î –∫–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)",
  "foreign_partner": {
    "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞",
    "country": "—Å—Ç—Ä–∞–Ω–∞",
    "swift": "SWIFT-–∫–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)",
    "address": "–∞–¥—Ä–µ—Å"
  },
  "payment_terms": "—É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)"
}

üîí –í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π. –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å —Å–∏–º–≤–æ–ª–∞ `{`. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –∏–∑–≤–ª–µ—á—å ‚Äî –≤–µ—Ä–Ω–∏ {"error": "failed"}.

–¢–µ–∫—Å—Ç:
"""

def extract_contract_parameters(text: str) -> dict:
    print("üß† [LLM] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞...")
    start = time.time()

    # –û–≥—Ä–∞–Ω–∏—á–∏–º –æ–±—ä—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    context = text[:1500].strip()
    prompt = EXTRACTION_PROMPT + context

    result = llm(prompt, stop=["\n\n"], temperature=0.2)
    output = result["choices"][0]["text"].strip()

    print(f"‚è±Ô∏è [LLM] –í—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {time.time() - start:.2f} —Å–µ–∫")
    print(f"üì• [LLM-–æ—Ç–≤–µ—Ç] {output[:200]}...")

    try:
        match = re.search(r"{.*}", output, re.DOTALL)
        if not match:
            raise ValueError("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON-–±–ª–æ–∫–∞")
        parsed = json.loads(match.group(0))
        if "error" in parsed:
            raise ValueError("LLM –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É: failed")
        return parsed
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ LLM: {str(e)}\n–û—Ç–≤–µ—Ç: {output}")
